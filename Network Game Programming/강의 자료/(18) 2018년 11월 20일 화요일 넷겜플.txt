

WSAEventSelect 모델

소켓 함수 호출이 성공할 수 있는 시점을 이벤트 객체를 통해 감지
	소켓에 대해 이벤트 객체를 생성하여 짝지어두면 네트워크 이벤트가 발생할 때마다 이벤트 객체가 신호 상태가 됨
	이벤트 객체의 상태 변화를 관찰함으로써 네트워크 이벤트 발생을 감지





WSAEventSelect 모델의 필요 기능과 관련 함수

	이벤트 객체 생성과 제거
		WSACreateEvent(), WSACloseEvent()
	
	소켓과 이벤트 객체 짝짓기
		WSAEventSelect()
	
	이벤트 객체의 신호 상태 감지하기
		WSAWaitForMultipleEvents()
	
	구체적인 네트워크 이벤트 알아내기
		WSAEnumNetworkEvents()





WSAEventSelect 모델을 이용한 소켓 입출력 절차
	1. 소켓을 생성할 때마다 WSACreateEvent() 함수를 이용해 이벤트 객체를 생성
	2. WSAEventSelect() 함수를 이용해 소켓과 이벤트 객체를 짝지음과 동시에
	 처리할 네트워크 이벤트를 등록
	3. WSAWaitForMultipleEvents() 함수를 호출해 이벤트 객체가 신호 상태가 되기를 기다림.
	 등록한 네트워크 이벤트가 발생하면 해당 소켓과 연관된 이벤트 객체가 신호 상태가 됨
	4.WSAEnumNetworkEvents() 함수를 호출해 발생한 네트워크 이벤트를 알아내고 적절한 소켓 함수를 호출해 처리










WSAEVENT WSACreateEvent ( ) ;
	성공: 이벤트 객체 핸들, 실패: WSA_INVALID_EVENT

BOOL WSACloseEvent (WSAEVENT hEvent) ;
	성공: TRUE, 실패: FALSE






int WSAEventSelect (
	SOCKET s,
	WSAEVENT hEventObject,
	long lNetworkEvents
) ;
	성공: 0, 실패: SOCKET_ERROR

소켓과 이벤트 객체를 짝지어주는 역할
어떤 조건에 깃발을 들것인지 결정
	lNetworkEvents: 관심 있는 네트워크 이벤트를 비트 마스크 조합으로 나타냄





DWORD WSAWaitForMultipleEvents (
	DWORD cEvents,
	const WSAEVENT *lphEvents,
	BOOL fWaitAll,
	DWORD dwTimeout,
	BOOL fAlertable
) ;
성공: WSA_WAIT_EVENT_0 ~ WSA_WAIT_EVENT_0+cEvents-1
또는 WSA_WAIT_TIMEOUT
실패: WSA_WAIT_FAILED
	

갯수의 최대가 64개 인데, 소켓의 갯수, 클라이언트의 갯수가 64개를 넘어가면 스레드 하나 더 생성해야함


cEvents, lphEvents: 배열 원소 개수, 배열의 시작 주소
fWaitAll: TRUE면 모든 이벤트 객체가 신호 상태가 될 때까지 대기. FALSE면 이벤트 객체 중 하나가 신호 상태가 되는 즉시 리턴
dwTimeout: 대기시간으로 밀리초 단위를 사용. INFINITE면 무한히 기다림.
fAlertable: 입출력 완료 루틴과 관련된 부분. WSAEvent 항상 FALSE








int WSAEnumNetworkEvents (
	SOCKET s,
	WSAEVENT hEventObject,
	LPWSANETWORKEVENTS lpNetworkEvents
) ;
	성공: 0, 실패: SOCKET_ERROR

	s: 대상 소켓
	hEventObject: 대상 소켓s와 짝지어둔 이벤트 객체 핸들을 넘겨주면 이벤트 객체가 자동으로 비신호 상태로 됨. 선택사항이므로 사용하지 않으려면 NULL 값을 넘겨주면 됨
	lpNetworkEvents: WSANETWORKEVENTS 구조체 변수의 주소 값을 전달하면, 발생한 네트워크 이벤트와 오류 정보가 이 변수에 저장
 




ex)

SOCKET s;
WSAEVENT hEvent;
WSANETWORKEVENTS NetworkEvents;
...
WSAEnumNetworkEvents(s, hEvent, &NetworkEvents);
// FD_ACCEPT 이벤트 처리
if(NetworkEvents.lNetworkEvents & FD_ACCEPT){
	if(NetworkEvents.iErrorCode[FD_ACCEPT_BIT] != 0){
		printf("오류 코드 = %d\n",
			NetworkEvents.iErrorCode[FD_ACCEPT_BIT]);
	}
	else{
		// accept() 함수 호출
	}
}





// FD_READ 이벤트 처리
if(NetworkEvents.lNetworkEvents & FD_READ){
	if(NetworkEvents.iErrorCode[FD_READ_BIT] != 0){
		printf("오류 코드 = %d\n",
			NetworkEvents.iErrorCode[FD_READ_BIT]);
	}
	else{
		// recv() 함수 호출
	}
}
