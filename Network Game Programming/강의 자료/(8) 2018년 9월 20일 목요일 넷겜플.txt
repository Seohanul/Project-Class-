5장*****



응용 프로그램 프로토콜 (application protocol)

	응용 프로그램 수준에서 주고받는 데이터의 형식과 의미 그리고 처리방식을 정의한 프로토콜

	ex) 로그인할때 아이디와 패스워드

	개발자들이 정해야하므로 성능에 영향 끼침




메시지 경계 구분 방법

	1. 송신자는 항상 고정 길이 데이터를 보냄
		수신자는 항상 고정 길이 데이터를 읽음
		(별로 쓸모가 없음, 맞추기가 쉽지 않으므로)
		낭비가 심할수도 부족할 수도 있기때문에		
		구현은 쉽지만, 적용할 수 있는 경우가 제한적

	2. 송신자는 가변 길이 데이터를 끝 부분에 특별한 표시
	(EOR, End Of Record)를 붙임. 수신자는 EOR이 나올때까지 데이터를 읽음
		이거도 잘안쓰임

	3. 송신자는 보낼 데이터 크기를 고정 길이 데이터를 보내고, 이어서 가변 길이 데이터를 보냄
	수신자는 고정길이 데이터를 읽어서 뒤따라올 가변 데이터의 길이를 알아내고, 
	이 길이만큼 데이터를 읽음 
	
	ex) 60바이트의 데이터를 보낸다고 하면
		 2바이트에 60을 넣어주고 60 바이트 앞에다 붙여줌 
	효율이 좋아서 2바이트 정도의 오버헤드는 극복
	가장 많이 쓰이는 방법***

	recv()가 0 이면 정상종료
	return 값이 데이터가 얼마나 받았는지옴 
	%로 보여줘 
 

	4. 송신자는 가변길이 데이터 전송 후 접속을 정상 종료
		수신자는 recv() 함수의 리턴값이 0이 될때까지 데이터를 읽음
	

	적합한 방법 ppt에 있음 



연습문제 5번 



바이트정렬
	빅엔디안 방식으로 통일

구조체 멤버 맞춤**
	구조체( c++의 클래스도 포함) 멤버의 메모리 시작 주소를 결정하는 컴파일러의 규칙

	ex) 

	struct MyMessage
	{
		int a; // 4
		char b; //1
		int c; // 4
		char d; //1
	};
	
	MyMessage msg;

	10바이트로 나와야하는데
	32비트 컴퓨터는 4바이트씩 끊어서 생각하므로 남는 공간이 생김
	실제로는 16바이트가 나옴
	정확한 크기가 안나옴




