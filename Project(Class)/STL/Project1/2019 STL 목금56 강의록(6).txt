

=========================================
Thu Mar 28 13:50:44 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
//	1장 읽어보기
//
//	자원을 확보하는 클래스 만들어보기
//
//
// 과제 - class String을 파일 분리하자.  #include "String.h"
//			1장 읽어보기 
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;


// 연습문제 1번 (62p)
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 초기화한 후
// 반복자를 사용해 배열의 내용을 한 줄에 하나씩 출력하라.

// 연습문제 2번
// 각 원소에 transform을 적용해 모든 모음을 *로 바꿔 화면 출력하라




// stl 자료구조가 되려면 begin(s) 가 반복자를 반환해야함
int main()
{
	string s[5]{"kill", "die", "monkey" ,"changja", "hu"}; //RAII

	/*transform(begin(s), end(s), ostream_iterator<string>(cout, "\n"), [](string& str) {
		for (char& c : str) {
			if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')
				c = '*';
		}
		return str;
	});	*/

	auto p = begin(s);

	while (p != end(s))
	{
		cout << *p++ << endl;
	}
	save("소스.cpp");

}



=========================================
Thu Mar 28 14:00:03 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
//	1장 읽어보기
//
//	자원을 확보하는 클래스 만들어보기
//
//
// 과제 - class String을 파일 분리하자.  #include "String.h"
//			1장 읽어보기 
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;


// 연습문제 1번 (62p)
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 초기화한 후
// 반복자를 사용해 배열의 내용을 한 줄에 하나씩 출력하라.

// 연습문제 2번
// 각 원소에 transform을 적용해 모든 모음을 *로 바꿔 화면 출력하라




// stl 자료구조가 되려면 begin(s) 가 반복자를 반환해야함
int main()
{
	string s[5]{"kill", "die", "monkey" ,"changja", "hu"}; //RAII

	transform(begin(s), end(s), ostream_iterator<string>(cout, "\n"), [](string& str) {
		for (auto p = begin(str); p != end(str); ++p)
			if (*p == 'a' || *p == 'e' || *p == 'i' || *p == 'o' || *p == 'u')
				*p = '*';
		
		return str;
	});	

	/*auto p = begin(s);

	while (p != end(s))
	{
		cout << *p++ << endl;
	}*/

	save("소스.cpp");

}



=========================================
Thu Mar 28 14:00:56 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
//	1장 읽어보기
//
//	자원을 확보하는 클래스 만들어보기
//
//
// 과제 - class String을 파일 분리하자.  #include "String.h"
//			1장 읽어보기 
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;


// 연습문제 1번 (62p)
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 초기화한 후
// 반복자를 사용해 배열의 내용을 한 줄에 하나씩 출력하라.

// 연습문제 2번
// 각 원소에 transform을 적용해 모든 모음을 *로 바꿔 화면 출력하라




// stl 자료구조가 되려면 begin(s) 가 반복자를 반환해야함
int main()
{
	string s[5]{"kill", "die", "monkey" ,"changja", "hu"}; //RAII

	transform(begin(s), end(s), ostream_iterator<string>(cout, "\n"), [](string& str) {
		for (auto p = begin(str); p != end(str); ++p)
			if (*p == 'a' || *p == 'e' || *p == 'i' || *p == 'o' || *p == 'u')
				*p = '*';
		
		return str;
	});	

	for (int i = 0; i < 5; ++i)
		cout << s[i] << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 14:04:53 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
//	1장 읽어보기
//
//	자원을 확보하는 클래스 만들어보기
//
//
// 과제 - class String을 파일 분리하자.  #include "String.h"
//			1장 읽어보기 
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;


// 연습문제 1번 (62p)
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 초기화한 후
// 반복자를 사용해 배열의 내용을 한 줄에 하나씩 출력하라.

// 연습문제 2번
// 각 원소에 transform을 적용해 모든 모음을 *로 바꿔 화면 출력하라




// stl 자료구조가 되려면 begin(s) 가 반복자를 반환해야함
int main()
{
	string s[5]{"kill", "die", "monkey" ,"changja", "hu"}; //RAII

	transform(begin(s), end(s), ostream_iterator<string>(cout, "\n"), [](string& str) {
		transform(begin(str), end(str), begin(str), [](char c) {
			toupper(c);
			return c;
		});
		return str;
	});	

	for (int i = 0; i < 5; ++i)
		cout << s[i] << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 14:05:00 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
//	1장 읽어보기
//
//	자원을 확보하는 클래스 만들어보기
//
//
// 과제 - class String을 파일 분리하자.  #include "String.h"
//			1장 읽어보기 
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;


// 연습문제 1번 (62p)
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 초기화한 후
// 반복자를 사용해 배열의 내용을 한 줄에 하나씩 출력하라.

// 연습문제 2번
// 각 원소에 transform을 적용해 모든 모음을 *로 바꿔 화면 출력하라




// stl 자료구조가 되려면 begin(s) 가 반복자를 반환해야함
int main()
{
	string s[5]{"kill", "die", "monkey" ,"changja", "hu"}; //RAII

	transform(begin(s), end(s), ostream_iterator<string>(cout, "\n"), [](string& str) {
		transform(begin(str), end(str), begin(str), [](char& c) {
			toupper(c);
			return c;
		});
		return str;
	});	

	for (int i = 0; i < 5; ++i)
		cout << s[i] << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 14:05:20 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
//	1장 읽어보기
//
//	자원을 확보하는 클래스 만들어보기
//
//
// 과제 - class String을 파일 분리하자.  #include "String.h"
//			1장 읽어보기 
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;


// 연습문제 1번 (62p)
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 초기화한 후
// 반복자를 사용해 배열의 내용을 한 줄에 하나씩 출력하라.

// 연습문제 2번
// 각 원소에 transform을 적용해 모든 모음을 *로 바꿔 화면 출력하라




// stl 자료구조가 되려면 begin(s) 가 반복자를 반환해야함
int main()
{
	string s[5]{"kill", "die", "monkey" ,"changja", "hu"}; //RAII

	transform(begin(s), end(s), ostream_iterator<string>(cout, "\n"), [](string& str) {
		transform(begin(str), end(str), begin(str), [](char c) {
			c = toupper(c);
			return c;
		});
		return str;
	});	

	for (int i = 0; i < 5; ++i)
		cout << s[i] << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 14:11:21 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
//	1장 읽어보기
//
//	자원을 확보하는 클래스 만들어보기
//
//
// 과제 - class String을 파일 분리하자.  #include "String.h"
//			1장 읽어보기 
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;


// 연습문제 1번 (62p)
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 초기화한 후
// 반복자를 사용해 배열의 내용을 한 줄에 하나씩 출력하라.

// 연습문제 2번
// 각 원소에 transform을 적용해 모든 모음을 *로 바꿔 화면 출력하라

// 연습문제 3번
// transform 안에 transform 넣어서 대문자로 바꿔라


// stl 자료구조가 되려면 begin(s) 가 반복자를 반환해야함
int main()
{
	String s[5]{10,20,30,40,50}; //RAII

	transform(begin(s), end(s), ostream_iterator<String>(cout, "\n"), [](String& str) {
		transform(str.getP(), str.getP() +str.getNum(), str.getP(), [](char c) {
			c = toupper(c);
			return c;
		});
		return str;
	});	

	for (int i = 0; i < 5; ++i)
		cout << s[i] << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 14:12:55 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
//	1장 읽어보기
//
//	자원을 확보하는 클래스 만들어보기
//
//
// 과제 - class String을 파일 분리하자.  #include "String.h"
//			1장 읽어보기 
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;


// 연습문제 1번 (62p)
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 초기화한 후
// 반복자를 사용해 배열의 내용을 한 줄에 하나씩 출력하라.

// 연습문제 2번
// 각 원소에 transform을 적용해 모든 모음을 *로 바꿔 화면 출력하라

// 연습문제 3번
// transform 안에 transform 넣어서 대문자로 바꿔라


// stl 자료구조가 되려면 begin(s) 가 반복자를 반환해야함
int main()
{
	String s[5]{10,20,30,40,50}; //RAII

	transform(begin(s), end(s), ostream_iterator<String>(cout, "\n"), [](String& str) {
		transform(str.getP(), str.getP() +str.getNum(), str.getP(), [](char c) {
			c = toupper(c);
			return c;
		});
		return str;
	});	

	for (int i = 0; i < 5; ++i)
		cout << s[i] << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 14:14:21 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;
int main()
{
	
	save("소스.cpp");
}



=========================================
Thu Mar 28 14:40:08 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<int, 10> a;
	cout << sizeof(a) << endl;
	save("소스.cpp");
}



=========================================
Thu Mar 28 14:40:23 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<int, 1000> a;

	cout << sizeof(a) << endl;
	
	save("소스.cpp");
}



=========================================
Thu Mar 28 14:44:23 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <initializer_list>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	auto i = { 1,2,3,4,5 }; // 이니셜라이저 리스트 , 나중에 emplace back 할때 사용 

	array<int, 5> a{ 1,2,3,4,5 };

	
	save("소스.cpp");
}



=========================================
Thu Mar 28 14:45:24 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <initializer_list>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<int, 5> a{ 1,2,3,4,5 };

	for (int i = 0; i < a.size(); ++i)
		cout << a[i] << endl;
	
	save("소스.cpp");
}



=========================================
Thu Mar 28 14:46:38 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <initializer_list>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<int, 5> a{ 1,2,3,4,5 };

	a[-1];
	
	save("소스.cpp");
}



=========================================
Thu Mar 28 15:04:41 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <initializer_list>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<int, 5> a;
	array<int, 5> b{ 3};


	a = b;

	save("소스.cpp");
}



=========================================
Thu Mar 28 15:04:51 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <initializer_list>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<int, 5> a;
	//array<int, 6> b{ 3};


//	a = b;

	save("소스.cpp");
}



=========================================
Thu Mar 28 15:08:34 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <initializer_list>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<String, 5> a{10,20,30,40,50};

	for (auto Iter = a.begin(); Iter != a.end(); ++Iter)
		cout << *Iter << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 15:09:05 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <initializer_list>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<String, 5> a{10,20,30,40,50};

	for (auto Iter = a.begin(); Iter != a.end(); ++Iter)
		cout << *Iter << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 15:15:08 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <initializer_list>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<String, 5> a{10,20,30,40,50};

	// a를 사전 순으로 정렬하라. 각 단어가 사전 순

	for (int i = 0; i < a.size(); ++i)
		sort(a[i].getP(), a[i].getP() + a[i].getNum()); 
	for (auto Iter = a.begin(); Iter != a.end(); ++Iter)
		cout << *Iter << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 15:16:05 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<String, 5> a{10,20,30,40,50};

	// a를 사전 순으로 정렬하라. 각 단어가 사전 순

	for (int i = 0; i < a.size(); ++i)
		sort(a[i].getP(), a[i].getP() + a[i].getNum()); 
	for (auto Iter = a.begin(); Iter != a.end(); ++Iter)
		cout << *Iter << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 15:16:49 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<String, 5> a{10,20,30,40,50};

	// a를 사전 순으로 정렬하라. 각 단어가 사전 순

	for (int i = 0; i < a.size(); ++i)
		sort(a[i].getP(), a[i].getP() + a[i].getNum()); 
	for (auto Iter = a.begin(); Iter != a.end(); ++Iter)
		cout << *Iter << endl;

	save("소스.cpp");
}



=========================================
Thu Mar 28 15:18:10 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 28일 (목)  4주 1
//
// 2장 순차 컨테이너
//  - array
//	- vector
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	array<String, 5> a{10,20,30,40,50};

	// a를 사전 순으로 정렬하라. 각 단어가 사전 순

	for (int i = 0; i < a.size(); ++i)
		sort(a[i].getP(), a[i].getP() + a[i].getNum()); 
	for (auto Iter = a.begin(); Iter != a.end(); ++Iter)
		cout << *Iter << endl;

	save("소스.cpp");
}

