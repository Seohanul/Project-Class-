

=========================================
Fri Mar 29 14:00:32 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<int> v;
	cout << sizeof(v) << endl;
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:01:13 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<int> v;
	cout << sizeof(v) << endl;
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:01:29 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<int> v;
	cout << sizeof(v) << endl;
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:03:19 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<int> v;
	cout << sizeof(v) << endl;
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:03:40 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<String> v{ 10,20,30,40,50 };
	cout << sizeof(v) << endl;
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:04:21 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<String> v{ 10,20,30,40,50 };
	cout << sizeof(v) << endl;
	cout << v.size() << endl;
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:07:41 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	cout << sizeof(String) << endl;
	vector<String> v{ 10,20,30,40,50 };
	cout << sizeof(v) << endl;
	cout << v.size() << endl;
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:18:40 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	cout << sizeof(String) << endl;
	vector<String> v{ 10,20,30};
	cout << sizeof(v) << endl;
	cout << v.size() << endl;
	cout << v.capacity() << endl;
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:19:07 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	cout << sizeof(String) << endl;
	vector<String> v{ 10,20,30};
	cout << sizeof(v) << endl;
	cout << v.size() << endl;
	cout << v.capacity() << endl;
	v.push_back(40);
	cout << v.capacity() << endl;
	cout << v.size() << endl;
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:20:01 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	cout << sizeof(String) << endl;
	vector<String> v{ 10,20,30};
	cout << sizeof(v) << endl;
	cout << v.size() << endl;
	cout << v.capacity() << endl;
	v.push_back(40);
	v.resize(50);
	cout << v.size() << endl;
	cout << v.capacity() << endl;

	save("소스.cpp");
}



=========================================
Fri Mar 29 14:36:32 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<String> v;
	cout << "벡터의 원소 갯수";
	cout << "재할당 없이 담을 수 있는 원소의 갯수";
	cout << "원소가 저장되어 있는 위치";
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:38:21 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<String> v;
	cout << "벡터의 원소 갯수				- " << v.size() << endl;
	cout << "담을 수 있는 원소의 갯수		- " << v.capacity() << endl;;
	cout << "원소가 저장되어 있는 위치		- " << v.data() << endl;
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:40:21 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<String> v;
	while (true)
	{


		cout << "v.size()		- " << v.size() << endl;
		cout << "v.capacity()	- " << v.capacity() << endl;;
		cout << "v.data()		- " << v.data() << endl;
		char c;
		cin >> c;
		v.push_back(10);
		if (c == 'q')
			break;
	}
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:43:11 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<String> v;
	while (true)
	{


		cout << "v.size()		- " << v.size() << endl;
		cout << "v.capacity()	- " << v.capacity() << endl;;
		cout << "v.data()		- " << v.data() << endl;
		char c;
		cin >> c;
		v.push_back(10);
		if (c == 'q')
			break;
	}
	save("소스.cpp");
}



=========================================
Fri Mar 29 14:47:34 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<String> v{10,20,30};
	v.data();

	save("소스.cpp");
}



=========================================
Fri Mar 29 14:48:56 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


int main()
{
	vector<String> v{10,20,30};
	String* p = v.data();
	++p;
	++p;
	cout << *p << endl;

	save("소스.cpp");
}



=========================================
Fri Mar 29 14:56:44 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(20);
	
	for(int i=0; i<20; ++i)
		v.push_back(ui(dre));

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (String s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Fri Mar 29 14:58:22 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(20);
	
	for (int i = 0; i < 20; ++i) {
		String s(ui(dre));
		sort(s.getP(), s.getP() + s.getNum());
		v.push_back(s);
	}

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (String s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Fri Mar 29 15:13:33 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(ui(dre));	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Fri Mar 29 15:13:49 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(String{ ui(dre) });	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Fri Mar 29 15:17:14 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(String{ ui(dre) });	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String& s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Fri Mar 29 15:21:17 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(String{ ui(dre) });	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String& s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Mon Apr  8 16:05:20 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(String{ ui(dre) });	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String& s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Mon Apr  8 16:05:24 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(String{ ui(dre) });	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String& s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Mon Apr  8 16:05:26 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(String{ ui(dre) });	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String& s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Mon Apr  8 16:05:36 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(String{ ui(dre) });	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String& s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Mon Apr  8 16:05:38 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(String{ ui(dre) });	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String& s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Mon Apr  8 16:07:26 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(String{ ui(dre) });	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String& s : v)
		cout << s << endl;

	save("소스.cpp");
}



=========================================
Mon Apr  8 16:07:31 2019
=========================================

//------------------------------------------------------------------------------------------------
// 2019년 3월 29일 (금)  4주 2
//
// 2장 순차 컨테이너 (Sequence Container - homogeneous data type 동일 자료형)
//  - array : 유일하게 자료의 갯수가 고정됨
//	- vector : dynamic array
//	- deque
//	- list
//	- forward_list
//------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;


// 비어있는 v에 String 20개를 추가하라
// String의 값은 uid(10,70)으로 초기화하라.
// String의 문자를 오름차순으로 정렬하라.
// v를 String의 길이 오름차순으로 정렬하라.
// 결과를 화면 출력하라.

#define MAX_NUM 20
int main()
{
	uniform_int_distribution<> ui(10,70);
	default_random_engine dre;
	vector<String> v;
	
	v.reserve(MAX_NUM);
	
	for (int i = 0; i < MAX_NUM; ++i) {
		v.push_back(String{ ui(dre) });	// int 하나 있는 생성자를 알아서 찾아서 초기화
								// explicit 키워드 넣어주면 자동형변환 막아줌
	}

	for(String& s : v)		
		sort(s.getP(), s.getP() + s.getNum());

	sort(v.begin(), v.end(), [](const String & a, const String & b) {
		return a.getNum() < b.getNum();
	});

	
	for (const String& s : v)
		cout << s << endl;

	save("소스.cpp");
}

