3장 소켓 주소 구조체 다루기

	소켓 주소 구조체

		소켓 주소를 담고있는 구조체
		다양한 소켓 함수의 인자로 사용
		데이터를 보낼게 있으면 
(Send 함수 의 인자로 보내야하는 주소정보를 소켓 주소 구조체에 넣어서 보내줌)



TCP/IP   -> 	SOCKADDR_IN{} , ipv6 는 SOCKADDR_IN6{}

기본형은 SOCKADDR 구조체임 (이론상의 구조체임 변형해서 사용)


typedef struct sockaddr {
	u_short sa_family; 		//	2바이트
	char 	sa_data[14];		// 	14바이트
} SOCKADDR;

기본형은 16바이트

sa_family  주소 체계를 나타내는 16비트 정수 값 (AF_INET)

sa_data		주소 정보, 주소 체계에 따라 필요한 정보가 다르므로 바이트 배열로 선언




* 이번학기 사용할 구조체
typedef struct sockaddr_in {
	short 	sin_family; // AF_INET	// 2바이트
	u_short sin_port; // 포트 번호	// 2바이트
	struct 	in_addr sin_addr; 	// IPv4 주소  
	char 	sin_zero[8]; 		// 0으로 설정 // 안씀 걍 버전 6으로 넘어갔기때문
} SOCKADDR_IN;



	struct 	in_addr sin_addr; 	// IPv4 주소 32비트


* IN_ADDR 구조체
typedef struct in_addr {
	union {
		struct { u_char s_b1, s_b2, s_b3, s_b4; } S_un_b;  //1바이트 * 4,  32비트짜리를 8비트씩 읽을 수 있도록 나눠놓은거
		struct { u_short s_w1, s_w2; } S_un_w;	//2바이트 * 2, 32비트 짜리를 앞뒤로 벌려놓은거
		u_long S_addr; // 4바이트 이걸 주로 쓸거임
	} S_un;
#define s_addr S_un.S_addr // 읽기 쉽게 디파인
} IN_ADDR;

s_addr 로 불러쓰면 편함



외울필요없음, 사이즈가 크다 라는 걸 보여주는거
SOCKADDR		16바이트
SOCKADDR_IN		16바이트
SOCKADDR_IN6		28바이트
~



크기가 크므로 인자로 줄때 시작 주소값만 주면 됨

주의해야할점 

SOCKADDR_IN addr;

~ // 이 부분에서 소켓 주소 구조체를 채워야함

// 포인터형(SOCKADDR*)으로 cast해야함 
SocketFunc(~,(SOCKADDR*)&addr, sizeof(addr), ~);






** 바이트 정렬

	메모리에 데이터를 저장할때 바이트순서

	
	빅 엔디안 : 메모리 주소의 앞에서부터 쓰고 읽는 방식
	리틀 엔디안 : 메모리 주소의 뒤에서부터 쓰고 읽는 방식



네트워크와 관련한 방식은 무조건 빅 엔디안으로 하자! 정함
	네트워크 바이트 정렬(IP 주소 , 포트 번호) -> 빅 엔디안으로 통일
	
애플리케이션에서는 알아서 돌아가게 놔둠
	호스트 바이트 정렬 -> 시스템이 사용하는 고유한 바이트 정렬 방식 (빅일수도 리틀일수도 있음)


데이터를 보낼때 상대 컴퓨터가 어떤 방식을 사용하는지 모르기 때문에 바이트 정렬 함수가 필요함


바이트 정렬 함수 

	hton*() 함수는 응용프로그램이 소켓 함수에 데이터를 넘겨주기 전에 호출되며 (호스트 바이트 정렬을 -> 네트워크 바이트 정렬(빅엔디안)으로 )
		만약 호스트가 빅이였으면 그대로 가고 리틀이였으면 빅으로 바꿔줌
	ntoh*() 함수는 소켓 함수가 리턴한 데이터를 응용 프로그램이 출력등의 목적으로 이용하기 전에 호출
		****만약 인자로 넣어준 값이 이미 호스트 바이트 정렬 이였으면 reverse해줌****

