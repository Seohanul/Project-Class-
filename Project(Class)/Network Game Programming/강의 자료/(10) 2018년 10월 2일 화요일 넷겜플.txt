6장 - 2

	예제 해보면서 스레드가 실행하고 있는지는 권한밖이였음

	이제 그걸 배울거임



	*용어

		스레드 스케줄링 or CPU 스케줄링
			윈도우 운영체제가 각 스레드에 CPU 시간을 적절히 분배하기 위한 정책
			계산할 수 있는 알고리즘

		우선순위 클래스
			프로세스 속성으로, 같은 프로세스가 생성한 스레드는 우선순위 클래스가 모두 같음

		우선순위 레벨 (여기까지가 프로그래머가 만지는걸 권장)
			스레드 속성으로, 같은 프로세스에 속한 스레드 간 상대적인 우선순위를 결정할 때 사용

		기본 우선순위
			우선순위 클래스과 우선순위 레벨을 결합한 값, 스레드 스케줄링 알고리즘에 적용해서 사용


우선순위 변경(2) 외울필요없음
(3)은 알긴해야함 

스레드들의 우선순위는 변경할 필요가 있음


우선순위 레벨 조작 변경 함수

	BOOL SetThreadPriority (
		HANDLE hThread, // 스레드 핸들
		int nPriority // 우선순위 레벨
	) ;

	성공: 0이 아닌 값, 실패: 0




	int GetThreadPriority (
		HANDLE hThread // 스레드 핸들
	) ;

	성공: 우선순위 레벨
	실패: THREAD_PRIORITY_ERROR_RETURN


쓸일이 별로 없음. 
우선 순위를 높인다고해서 작업을 먼저 끝낸다는 보장이 있는건 아님
확률을 높이는것 뿐




** 스레드 제어함수

WaitForSingleObject() 함수

	두개의 스레드가 있을때 한개의 스레드 종료를 기다렸다가 바로 다른 스레드를 시작하고 싶을때


WaitForMultipleObjects() 함수
	두개 이상의 스레드가 종료하기를 기다릴떄





	DWORD WaitForSingleObject (
		HANDLE hHandle, // 종료를 기다릴 대상 스레드
		DWORD dwMilliseconds // 대기 시간, 밀리초 단위
	) ;

	성공: WAIT_OBJECT_0 또는 WAIT_TIMEOUT, 실패: WAIT_FAILED
	2번째 인자에 INFINITE 값 넣으면 스레드가 종료될때까지 무한히 기다림 


ex)

	HANDLE hThread = CreateThread(...);
	DWORD retval = WaitForSingleObject(hThread, 1000);
	if(retval == WAIT_OBJECT_0) { ... } // 스레드 종료
	else if(retval == WAIT_TIMEOUT) { ... } // 타임아웃(스레드는 아직 종료 안 함)
	else { ... } // 에러 발생







	DWORD WaitForMultipleObjects (
		DWORD nCount, // 배열 원소 개수, 최대값은 MAXIMUM_WAIT_OBJECTS로 정의
		const HANDLE* lpHandles, //배열의 시작 주소
		BOOL bWaitAll, // ** TRUE면 모든 스레드가 종료할 때까지 대기, FALSE면 한 스레드가 종료하는 즉시 리턴
		DWORD dwMilliseconds // 대기시간으로 밀리초 단위 사용
	) ;
		성공: WAIT_OBJECT_0 ~ WAIT_OBJECT_0 + nCount-1
			또는 WAIT_TIMEOUT
		실패: WAIT_FAILED


ex) 	HANDLE hThread[2];
	HANDLE hThread[0] = CreateThread(...);
	HANDLE hThread[1] = CreateThread(...);
	WaitForMultipleObjects(2, hThread, TRUE, INFINITE);


ex2)

	// 스레드 하나의 종료를 기다린다.
	HANDLE hThread[2];
	HANDLE hThread[0] = CreateThread(...);
	HANDLE hThread[1] = CreateThread(...);
	DWORD retval = WaitForMultipleObjects(2, hThread, FALSE, INFINITE);
	switch(retval){
	case WAIT_OBJECT_0: // hThread[0] 종료
		break;
	case WAIT_OBJECT_0 + 1: // hThread[1] 종료
		break;
	case WAIT_FAILED: // 오류 발생
		break;
	}






스레드 실행 중지 함수


	DWORD SuspendThread (
		HANDLE hThread // 스레드 핸들
	) ;

	성공: 중지 횟수, 실패: -1

중지는 시키는데 언제 다시할지 모를때 이걸 사용함


	재실행 함수
	DWORD ResumeThread (
		HANDLE hThread // 스레드 핸들
	) ;

	성공: 중지 횟수, 실패: -1




	void Sleep (
		DWORD dwMilliseconds // 밀리초(ms)
	) ;

	시간을 알때는 이걸 쓰면됨


중지 함수는 매우 비싼함수임, cpu를 멈추는거임 
함부로 남용하면 안되고 정말 필요할때만 사용해야함 










**멀티스레드 TCP 서버

DWORD WINAPI ProcessClient(LPVOID arg)
{
	// ③ 전달된 소켓 저장, 소켓 타입으로 형변환
	SOCKET client_sock = (SOCKET)arg;

	// ④ 클라이언트 정보 얻기
	addrlen = sizeof(clientaddr);
	getpeername(client_sock, (SOCKADDR *)&clientaddr, &addrlen);
	
	// ⑤ 클라이언트와 데이터 통신
while(1){
...
} ...








int main(int argc, char *argv[])
{
...
while(1){
// ① 클라이언트 접속 수용 (소켓 리턴)
client_sock = accept(listen_sock, ...);
...
// ② 스레드 생성, 스레드 함수에 소켓을 넘겨줌
CreateThread(NULL, 0, ProcessClient, (LPVOID)client_sock, 0, NULL);
			스레드 함수의 시작주소(3), 클라이언트의 주소 정보 넘겨줌(4), 바로시작 (5) ..
}
...
}



------------------------
보강


스레드 동기화
	멀티스레드 환경에서 발생하는 문제를 해결하기 위한 일려의 작업



	스레드끼리 접근하는 순서를 정하든지
		하나가 끝날때까지 기다리든지



스레드 동기화 원리
	중간에 매개체 역할을 하는 부분이 필요 (이벤트 객체)
	두 스레드는 매게체를 통해 진행 여부를 판단하고 이게 근거해 자신의 실행을 계속할지를 결정



동기화 객체의 특징
	Create*() 함수를 호출하면 커널 메모리 영역에 동기화 객체가 생성되고, 이에 접근할 수 있는 핸들이 리턴됨

	평소 비신호 상태(깃발내림)로 있다가 특정 조건 만족되면 신호 상태(깃발 올림)가 됨

	wait*() 함수로 감지

	사용이 끝나면 CloseHandle() 함수 호출



임계 영역 (critical section)
	
	둘 이상의 스레드가 공유 자원에 접근할 때, 오직 한 스레드만 접근을 허용해야 하는 경우에 사용
	
	대표적인 스레드 동기화 기법이지만, 생성과 사용법이 달라서 동기화 객체로 분류하지는 않음

	프로세스의 유저 메모리 영역에 존재하는 단순한 구조체이므로 한 프로세스에 속한 스레드 간 동기화에만 사용
	일반 동기화 객체보다 빠르고 효율적


	CRITICAL_SECTION cs; ①

	DWORD WINAPI MyThread1(LPVOID arg)
	{
		...
		EnterCriticalSection(&cs); ②
		// 공유 자원 접근
		LeaveCriticalSection(&cs); ③
		...
	}
	


	int main(int argc, char *argv[])
	{
		...
		InitializeCriticalSection(&cs);
		// 둘 이상의 스레드를 생성하여 작업을 진행한다.
		// 생성한 모든 스레드가 종료할 때까지 기다린다.
		DeleteCriticalSection(&cs);
		...
	}

임계영역은 쉽게 적용할 수 있음
but, 순서 제어가 안됨
	동시에 접근하는걸 막을 수는 있는데 어떤 스레드가 먼저 실행될지 알 수 없음 



(중요)
*** 이벤트
	사건 발생을 다른 스레드에 알릴 때 사용
	한 스레드가 작업을 완료한 후 기다리고 있는 다른 스레드에 알릴 때 사용


이벤트를 사용하는 *전형적* 절차 (꼭 이런건 아님)
	1. 이벤트를 비신호 상태로 생성 
	2. 한 스레드가 작업을 진행하고, 나머지 스레드는 이벤트에 대해 Wait*() 함수를 호출해 이벤트가 신호 상태가 될 때까지 대기 (sleep)
	3. 스레드가 작업을 완료하면 이벤트를 신호 상태로 바꿈
	4. 기다리고 있던 스레드 중 하나 혹은 전부가 깨어남 (wakeup)


이벤트 상태 변경
	BOOL SetEvent(HANDLE hEvent); // 비신호 상태 -> 신호 상태
	BOOL ResetEvent(HANDLE hEvent); // 신호 상태 -> 비신호 상태



자동 리셋 이벤트 
	이벤트를 신호 상태로 바꾸면, 기다리는 스레드 중 하나만 깨운 후 자동으로 비신호 상태가 됨

수동 리셋 이벤트
	이벤트를 신호 상태로 바꾸면, 기다리는 스레드를 모두 깨운 후 계속 신호 상태를 유지함
	비신호로 변경이 필요할시 ResetEvent() 함수를 호출




HANDLE CreateEvent (
	LPSECURITY_ATTRIBUTES lpEventAttributes, // NULL 씀
	BOOL bManualReset, //TRUE면 수동 리셋, FALSE면 자동 리셋
	BOOL bInitialState, // TRUE면 신호, FALSE면 비신호 상태로 시작
	LPCTSTR lpName // 이벤트에 부여할 이름 // 나중에 다른 프로세스의 스레드의 이벤트에 접근할때 핸들값을 모르니까 이름으로 접근할때 사용 (나중에 할꺼야)
) ;
	성공: 이벤트 핸들, 실패: NULL




