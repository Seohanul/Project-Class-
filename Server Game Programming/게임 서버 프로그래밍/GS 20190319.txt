예제 돌려봤음

잘 정리하기





*** IOCP ***
고속 다중 접속 
성능이 더좋음 (멀티쓰레드)


콜백함수 실행을 하나의 스레드가 담당을 하면 밀림

콜백함수의 실행을 멀티스레드로 나누자! -> IOCP


기본적으론 Overlapped I/O 콜백
	

Thread Pool 사용  , 놀고 있는 스레드 찾아서 실행
		thread를  코어 갯수이상 만드는건 의미 없음 
		Thread 생성 파괴 오버헤드 없앰




-Event Queue를 사용 (소켓 자체를 등록)
	프로그래머가 Queue에 자신의 event 등록 가능 




IOCP : 커널 객체, 커널에서 관리하는 클래스
	ex) file




HANDLE CreateIoCompletionPort(
	HANDLE FileHandle,
	HANDLE ExistingCompletionPort,
	ULONG_PTR CompletionKey,
	DWORD NumberOfConcurrentThreads };

handle로 컨트롤

HANDLE hIOCP = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, NULL, 0};
	첫번째 핸들 : INVALID_HANDLE_VALUE , 파일하고는 관계없음
	두번째 인자 : 이미 만들어진거 있나?, 처음 쓰는거니까 NULL
	세번째 인자 : NULL
	마지막 		: 스레드 풀에 스레드 여러개 있는데 동시에 스레드 몇개 꺼낼꺼냐?
			4를쓰면 4개를 꺼내서 4개가 동시에 실행이 됨
			core의 개수만큼 해야함
			0쓰면 알아서 해줌
			만약 고정적으로 스레드 쓰는게 있으면 코어 수에서 그거 빼고 넣어주긴하는데
			그런 경우 아니면 무조건 0





IOCP가 어려운 이유

	1. 엉뚱한 API 
		- 이름, 파아미터가 근본 없다. 고민하지말고 하라는대로 넣어라. 	
		- 너무 부족한 API


	2. 멀티쓰레드 이기때문에





IOCP 준비
	IOCP 객체와 소켓 연결 해야함
	recv, send 할때마다 하는게 아니라
	소켓 자체를 IOCP 객체와 연결해줌


	HANDLE CreateIoCompletionPort(socket, hIOCP, key, 0};
		
	소켓을 핸들에 등록하면됨
	key는 *유니크*한 임의의값으로 설정 - 소켓에 이름을 주는거라 생각
	0은 무조건 0

	

	** IOCP 객체는 딱 하나만 존재 **
	이름이 근본없어서 햇갈릴 수도 있는데
	IOCP 객체는 하나고, 거기다 소켓들 등록하는거임




Worker Thread 생성

	thread { worker_thread }; // 생성자에다 함수 이름을 넣어주면 쓰레드 하나가 만들어지고 저 함수를 실행함
					// 함수가 무한루프면 스레드 종료 안하고 계속 실행


	직접 만들고 쓰레드 풀에 넣어줘야함
	

		
	while(1) {
		GetQueuedCompletionStatus(  // 스레드풀에 넣어주는 함수임, 근본 x
			hIOCP,	
			&dwIOSize,  
			&key,
			&lpOverlapped,
			INFINITE;
		);
		lpOverlapped에 따른 처리;
	}



	BOOL GetQueuedCompletionStatus(
		HANDLE CompletionPort,
		LPDWORD lpNumberOfByte,
		PULONG_PTR lpCompletionKey,
		LPOVERLAPPED *lpOverlapped,
		DWORD dwMillisocnds);

	// 매개변수에 스레드가 없다?
	// this가 생략된거임 
	// 이 함수를 실행하고 있는 스레드 자기 자신을 등록하는거임
	// 이게 호출되면 바로 스레드 등록하고 sleep함

	I/O완료 상태를 report
	Completion Port : 커널 옵젝트
	lpNumberofByte : 전송된 데이터 양
	lpCompletionkey : 미리 정해놓은 ID
	lpOverlapped : Overlapped I/O 구조체





이제 필요한건 멀티쓰레드 콜백함수
	근데 이것도 없어?

IOCP는 send,recv에 있는 콜백함수 안씀 무시함

그래서 GetQueuedCompletionStatus 얘를 그냥 호출해버림

overlapped callback은 (error, numbyte,포인터, flag) 이 있는데

여기서 비슷하게 매개변수로 커버함 + key까지 와서 소켓도 구분가능 


문제는 이게 send인지 recv인지 알 수가 없음.

이번엔 LPOVERLAPPED *lpOverlapped 얘를 사용해서 해결










- 이벤트 추가함수 
 
BOOL PostQueuedCompletionStatus(
	HANDLE CompletionPort,
	DWORD NumberOfByte,
	ULONG_PTR dwCompletionKey,
	LPOVERLAPPED lpOverlapped);

얘는 패킷주고 받는데는 상관없는 함수임 (나중에 특정 용도로 사용할꺼)



커널의 Queue에 이벤트 추가
Completion Port : 커널 옵젝트
NumberofByte : 전송된 데이터 양
dwCompletionkey : 미리 정해놓은 ID
lpOverlapped : Overlapped I/O 구조체















