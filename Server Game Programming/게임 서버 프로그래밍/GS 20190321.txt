
IOCP

API
	CIOCP
		IOCP 객체 생성
		Socket을 IOCP에 연결
	GQCS
		Thread를 IOCP의 thread-pool에 등록하고 멈춤
		IOCP로 부터 I/O 결과를 얻어옴



앞으로 이런식으로 진행
	IOCP 서버 Framework
	멀티쓰레드
	IOCP 실습







IOCP 서버 설계
	1. 초기화
		ICOP 핸들 생성

	2. Worker thread 생성
		Thread들을 IOCP thread-pool에 등록
		accept하기 전에 Thread부터 만들고 등록해야함

	3. Accept Thread 생성
		Accept 무한 루프
		새로운 소켓이 접속하면 IOCP에 연결 후 WSARecv 호출




Accept thread란
	새로 접속해 오는 클라이언트를 IOCP로 넘기는 역할

	무한루프 돌면서
		Accept() 호출
		새 클라이언트가 접속했으면 클라이언트 정보 구조체 만듬
		IOCP에 소켓을 등록
			- send / recv 가 IOCP 통해 수행

		WSARecv() 호출함
			- Overlapped I/O recv 상태를 항상 유지해야 한다.




클라이언트 정보 구조체
클라이언트 객체
	- 서버는 클라이언트의 정보를 갖고 있는 객체가 필요
		최대 동접과 같은 개수가 필요
		필요한 정보 : ID, Socket, 상태, 개임정보 (name, HP, x, y..)




hevent 로 소켓을 전달하는 방식은 미래의 호환성 문제때문에 권장하지 않음.

GetQueuedCompletionStatus를 받았을 때
클라이언트 객체를 찾을 수 있어야 한다.
	-IOCP에서 오고 가는 것은 completion_key와 overlapped I/O pointer, num byte 뿐

	- 이 key를 클라이언트 객체의 포인터로 하거나
		클라이언트 객체의 ID 혹은 Index로 한다. 
		64비트에서 하니까 아래방법이 더 좋음 
		실습에서는 배열로 해서 인덱스로 할거임 이걸 또 ID로 할거임






Overlapped 구조체
	모든 send ,recv 는 Overlapped 구조체가 필요 
	하나의 구조체를 동시에 여러 호출에서 사용하는 것은 불가능


	소켓당 recv 호출은 무조건 한개여야한다.
		Recv 호출 용 Overlapped 구조체 한개가 있어서 계속 재사용하는 것이 바람직 (new/delete 안함, overhead 제거)

	소켓당 send 호출은 동시에 여러 개가 될 수 있다. **	// send가 끝날때까지 기다려주지 않고, 멀티쓰레드에서 동시에 send도 하기 때문에
		Send 버퍼도 같은 갯수가 필요하다.
		개수의 제한이 없으므로 new/delete 로 사용
			send 할때 new, 완료되면 delete
		성능을 위해서는 공유 Pool을 만들어서 관리할 필요가 있다.
		

	recv는 무조건 1개 필요하고
	send는 몇개가 필요할지 알 수가 없음.
		쓰레드 여러개고, 같은 쓰레드에도 send가 겹칠 수가 있으니 최대 몇개인지도 알 수가 없음.
	그래서 new/delete를 하긴 하는데 메모리 풀 이용해서 오버헤드 최대한 줄여야함


	


 I/O버퍼 묶어야함

Overlapped I/O pointer를 확장
	Overlapped I/O 구조체 자체는 쓸만한 정보가 없다.
	따라서, 정보들을 더 추가할 필요가 있다.
		뒤에 추가하면 IOCP는 있는지 없는지도 모르고 에러도 없다
		WSARecv(.., &Overlapped, ..)
		구조체 밑에다가 정보들 추가하는거임 (buffer, send인지 recv인지)
		구조체 주소를 아니까 나중에 GQCS 호출할때
		가서 읽기만 하면 됨


	꼭 필요한 정보
		recv인가 send인가?
			만약 리슨소켓을 등록하면 listen도 구분해야함
			나중에는 다른 종류도 구분해야함

		I/O Buffer의 위치 (Send 할 때 버퍼도 같이 생성되므로) **

			
	




*WorkerThread

	-무한루프
		콜백만 실행함
		GetQueuedCompletionStatus를 부른다.
		에러처리/접속종료 처리를 한다.
		Send/Recv 처리를 한다.
			Overlapped I/O 구조체 아래 붙어있는 정보 활용
			

			Recv
				패킷이 다 왔나 검사 후 다 왔으면 패킷 처리
				여러 개의 패킷이 한번에 왔을 때 처리
				쪼개지거나 여러개가 올 수 있음 완성되면 처리
				계속 Recv 호출
				

			Send
				Overlapped 구조체, 버퍼 free (혹은 재사용)




main()
{
	hIOCP = CIOCP;
	Worker_thread 시작;
	Accept_thread 시작;
}

끝


Accept_thread()
{
	while()
	{
		Socket accept();
		CreateIOCP(hiocp, Socket)
		WSARecv(Socket);
	}
}


Worker_thread()
{
	while()
	{
		GQCS
		if(recv)
			패킷조립, 패킷 실행 (여기에다 살 붙이는거임), WSArecv

		else
			delete
	}
}



패킷실행함수()
{
	switch(type)
		처리~
}









if(Recv)
{	
	ProcessPacket(client_info,buf)
	WSArecv();
}
이렇게 두줄만에 끝나면 좋은데

패킷이 짤릴 수도 있고, 패킷의 종류도 다양하기 때문에 

지저분하게 처리를해야함 

패킷 크기와 버퍼의 크기를 같게 할 수 없음.

버퍼관리를 해줘야함





버퍼관리

	Recv
		하나의 소켓에 대해 Recv 호출은 무조건 하나
		버퍼 계속 사용 가능
		
		패킷들이 중간에 잘려진 채로 도착할 수 있다.
			모아뒀다가 다음에 온 데이터와 붙여줘야함
			남은 데이터를 저장해 두는 버퍼 필요, 또는 Ring Buffer 사용

		패킷들이 여러 개 한꺼번에 도착할 수 있다.
			잘라서 처리해야함

	Send
		Send는 여러개가 동시에 가능
			멀티쓰레드
			Overlapped 구조체와 WSABUF는 중복 사용 불가능!
		
		클라이언트가 보내는 패킷들은 순서대로지만 (클라가 1개이므로)
		서버에서 클라로 보내는건 여러 스레드가 동시에 send 하므로 겹쳐지거나 잘려서 올 수 있지않나?
			-> 그럴 일 없음 Send한거는 묶어서 보냄
			Windows는 send를 실행한 순서대로 내부 버퍼에 넣어 놓고 전송한다.
			이거는 window에서 확실히 해줌
		
		GQCS 에서 send 완료 된다고 했을때 num of byte 오니까 검사를 해야함
		중간에 잘렸는지 다 갔는지 검사해야함

		잘렸다면?? (커널이 사용하는 커널 버퍼가 꽉차서) 
			나머지를 다시 보내면 된다? 말은 쉽지
			다시 보내기 전에 다른 쓰레드의 send가 끼어들었다면? 이건 커널이 막아줄 수 없음
			
			해결책
				모아서 차례차례 보낸다 -> 성능 저하
				이런 일이 벌어진 소켓을 끊어버린다. 
			(이 상황이 발생된거 자체가 이미 망한거긴한데 혹시나해서 시도해봄)
					

				




먼저 할 일
	- 다중 접속 관리
		클라이언트 정보 구조체를 어떻게 만들 것인가
		어떤 자료구조에 넣어서 관리할 것인가
		클라이언트 접속 시 마다 ID 부여
		ID 재사용 정책

	- 패킷 포맷 및 프로토콜 정의
		기본 패킷 포맷
			길이 + 타입 + 데이터

		클라 - 서버 주고받은 패킷의 포맷 약속

		클라 -> 서버
			이동 패킷
		
		서버 -> 패킷
			위치 지정, ID 접속 알림 , 로그아웃 알림 





	-패킷 처리 루틴 작성
		bool PacketPeocess ( pBuf, client_id);








Recv의 구현
	루프
		모든 데이터를 처리했으면 goto 종료
		남는 데이터로 패킷을 완성할 수 있는가?
			예 -> 패킷 버퍼 완성, 패킷 처리 함수 호출
			아니오 -> 남는 데이터 모두 패킷 버퍼로 전송
		
	종료
		Recv를 호출




Overlapped 구조체 확장
	
구조체에 버퍼랑 send인지 recv인지 넣어줘야함



클라이언트 정보에 추가될 내용
	send recv에 사용되는 버퍼 말고
	패킷이 조립되는 버퍼 필요	// 여기에는 무조건 패킷의 앞부분만 들어가있음
	이전에 받아 놓은 패킷의 양
	현재 수신 중의 패킷의 크기






Recv의 구현 코드
 복잡함
	천천히 읽어보자.
	마지막에 패킷 사이즈를 0으로 하는 이유
	한번에 다왔을때는 패킷 사이즈를 알 수 없으므로 그냥 0으로함 (엉뚱한 값을 읽을 수도 있으므로)
	대신에 맨위 if문에서 읽음



WSASend의 사용
	Send 가 짤린다면
		에러처리하고 끊어버려야함
		현재 os의 메모리가 꽉찬경우 - 애초에 이런일이 벌어지면 안됨
		이런일이 벌어지지 않으려면 send의 데이터 양을 조절해야함

Worker Thread에서의 Send 구현
	구조체랑 버퍼 해제 시켜야함


체스에서의 클라이언트 객체




프로토콜 정의 TIP
	새 ppt에 있음


패킷의 95%가 이동 패킷임 
		이거는 최대한 크기를 줄여야함






-------------------------

멀티쓰레드

	성능 높이려면 멀티 코어 ,멀티 cpu 활용 해야함 
	그러려면 멀티쓰레드 프로그래밍이 필요

	
	IOCP 멀티 쓰레드 프로그래밍을 요구함
		싱글도 가능은한데 뭐하러? 성능은 그대론데 어렵기만한데?



멀티쓰레드란
	하나의 프로그램에서 여러 곳이 동시 다발적으로 실행되는 프로그래밍 기법


	프로그램이 실행되면 메모리 잡히고
	PCB 안에 context가 생기는데
	그 안에 pc랑 sp 가 생김
	pc는 코드공간 가리키고 sp는 스택 가리킴

	멀티 쓰레드는 context 가 여러개가 생기고
	스택도 여러개 잡히고 여러 일을 동시에 하게됨

	스레드 4개 = context 4개


	최근에는 병렬처리 프로그래밍 기법 사용




	왜 병렬처리를 하는가?
		한개의 CPU의 처리속도가 너무 느리기 때문
		cpu가 빨라져도 또 인간은 같은 실수를 반복한다 ㅋㅋㅋ
		프로그램 구조 깔끔해진다? 개소리임 	
			

	왜 지금 병렬처리가 각광을 받고 있는가?
		- 발열 한계에 부딪친 클럭 증가 500G 만들면 바로 녹아버림
		- 제작사의 사활을 건 멀티코어 CPU의 보급
		- 콘솔 모바일 기기의 멀티 core화

	
