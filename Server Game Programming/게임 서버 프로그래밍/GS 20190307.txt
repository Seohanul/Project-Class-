온라인 게임서버 


	배경지식


게임 서버를 위한 하드웨어와 소프트웨어





게임 서버의 분류
	로비 서버 (for MOG)
		스타크래프트의 배틀넷
		실제 게임 전에 플레이할 상대를 찾는 곳(match making)

		채팅 서버의 확장
		실제 게임은 P2P로 이루어짐 (클라끼리 모여서함)
			현재는 P2P 가 아니라 Client/Server로 실제 게임을 구현하는 추세
			해킹 때문에



	MMOG 서버
		MUD의 서버가 효시
		게임 컨텐츠가 가 서버에 들어 있음
		서버의 부하가 크다.
		이번 학기 강의의 주 관심사







게임 서버의 설계 목표 (안정성, 성능)
	-쾌적한 게임 환경
		렉x, 안정적

	- 동접
		게임성 : 경제시스템 , 커뮤니티
		서비스 비용 절약

	- 핫스팟
		게임 컨텐츠 제약 완화 : 이벤트, 공성전, 혈맹전


성능향상을 위한 해결책
	효율적인 프로그래밍
	부하 분산 (여러 대의 컴퓨터)



PC속도 높이는법 2가지   clock 높이거나, 코어를 늘리거나
			clock은 바꿀 수 없으니
			(오버클락하면 서버가 불안정해지고 자주 죽음)
			코어를 늘려야함 176개 까지 가능





*부하 분산
	- 서버 분리 (샤딩, Sharding)
	- 기능별 분산
	- 공간 분할(월드 분할)





	-서버 분리 (샤딩)
		월드 복사 & 분리
		다른 월드로 이동 불가
			불편
			돈내면 월드 이전 서비스
			DB가 분리

		통합하는 추세
			공동 경매장, 공동 인던, 서버간 결투 ,..






	기능별 분산 구현
		사용자 분리 없이 확장
		부하가 크기 때문에 여러 종류의 서버의 조합으로 구성 (기능별 분리)

	Main Server

	Login Server

	AI Server
		
	DB Server, Query Server	


	실제 이렇게 사용하고 있음




한계..

	Main Server
		부하가 집중
		더이상 기능적으로 나눌 수 없다.
			무시하고 계속 나누면 넥슨의 마영전 온라인 사태 혹은 듀랑고
			


	Main Server 의 부하 감소를 위한 분할
		- 공간 분할 : Zone 서버
			전체 맵을 지역별로 나누어서 다른 서버가 관리
			Portal 방식과 seamless 두가지 방식이 있다.
				대륙분할		BigWorld


	wow는 공간분할로 대륙별로 서버가 있는데도
	리니지2(nc)의 한 서버로 돌리는 거보다 동접수가 적음
		nc가 서버 기술이 더좋음.
	

		- 접속 분할 : Duplicate Server
			
			동일한 공간의 clone을 만들어서 각각 다른 서버가 관리
			샤딩과는 다름.
			01, 02, 03 서버 이런거랑 같음
			여러개의 채널이 한 DB에 들어가기 때문에, DB가 버틸 수 있는만큼만 가능

			community 활성화가 힘들다
			유저들이 알아서 나눔 1채널은 상거래 2~5는 사냥 이런거

			Mu(수동)
			
			 Guild War(자동) - 파티맺으면 그 서버로 자동으로 이동함





따라서, 샤딩도 하고 접속 분할도함








	

공간 분할 Zone 서버의 특징
	Seamless
	구현하기 어렵다
	경계선 근처에 서있는 물체를 2개 이상의 서버가
동시에 관찰할 수 있어야 한다.
? Potal
	구현하기 쉽다.
	게임성이 떨어진다.
	Loading
	플레이의 단절
	인스턴스 던전도 여기에 속한다.




정적 분할과 동적분할
	사람몰리는거봐서 경계선을 움직이는거
		



Zone Server
	- master 서버 (FrontEnd 서버) : 연결 및 이동 담당
	- zone 서버 : 게임 컨텐츠 담당, 다이나믹하게 생성될 경우 인던서버라 부름. 





















게임 서버 하드웨어


	하드웨어 지식이 필요한 이유
		서버에 걸리는 부하가 많기 때문에 하드웨어의 성능을 최대한 끌어내는 프로그래밍이 필요하다.
	
	하드웨어의 성능을 최대한 끌어내려면 하드웨어가 어떻게 성능에 영향을 미치는지 알아야 한다.


중요 하드웨어 
	cpu
	memory
	network


	하드 디스크의 성능은 관계 없음,.
	만약 그렇다면 잘못짠거임



CPU
	X86 계열이 대세
		**Intel AMD**, ARM 느려 Power PC (IBM) 비싸


	Intel AMD 
		노트북용 cpu, 데스크탑 cpu, *서버용 cpu*
		Intel Xeon, AMD EPYC
		i7 같은건 안됨

	64비트와 멀티코어
	속도와 Cache 크기, 메모리 Bus 대역폭이 중요




 - 서버용 cpu와 일반 desktop용 cpu의 차이

	서버용 cpu는 Multi Processor 를 지원한다.
		**Cache 동기화 지원 (i7에는 이게 없어)


	서버용 cpu는 서로간의 데이터 전송 전용 통로를 제공한다

		AMD : HyperTransport
	
		인텔 : QPI

	메모리 채널 증가 : 8개 까지
		메인보드 사면 cpu 옆에 메모리 슬롯 4개 씩있음 (cpu가 이걸 정하는거임, 인텔이 정하는거)
		제온 cpu는 8개 까지 가능



리니지 2는 AMD로 했음 인텔꺼랑 동접이 10배 차이가 나서

지금은 비슷해졌음









64비트 이슈
	64비트를 사용한다.
		OS와 Complier도 64비트 버전을 사용해야한다.
	

	기존의 32비트 CPU로는 최대 4GB의 메모리 밖에 쓸 수 없었기 때문에
	서버 용량에 제한이 많았음


	프로그래밍 시 Int type과 Pointer type의 크기가 달라짐
			

	32비트 쓰지마라 ! 라는거임


	




Multi-processor 
	- SMP (Symmetric Multi Processing) -  cpu가 여러개 , 모든 cpu가 모든 메모리를 읽고 쓸 수 있다.
	- 빠른 네트워크 응답속도와 처리 속도 개선을 위해 Multi-Processor을 사용


Multi-core 
	- 발열에 막힌 CPU의 성능향상 제한을 극복하기 위한 궁여지책
	- 기존의 4~8개의 CPU를 활용하던 프로그램 방식에서 8~64개의 core를 활용하도록 변경 필요
	앞으로도 계속 core 개수가 늘어날 예정



	코어를 여러개 쓰는거보다 더빠른 코어를 쓰는게 당연히 좋음
	하지만 불가능, 클락 속도를 높이면 cpu가 타버림 냉각을 할 수가 없음.





Multi-Processor와 Multi-Core와의 차이점
	-SW적으로는 차이가 없음.
	- HW 적으로는 메모리 접근 시 성능 차이가 존재
		cpu의 개수만큼 메모리 대역폭 증가
		NUMA (Non Uniform Memory Access) 문제
			다른 cpu에 연결되어 있는 메모리에 접근할때는 시간이 더걸림
			학부에서 다루기에는 어려움, 이수업때는 안함







CPU 발전 Trend
	-클락 속도 증가
		발열때문에 한계

	- 클락당 수행되는 명령어의 갯수 증가
		Pipeline, SuperScalar,~
		캐시 용량 증가
		이것도 한계 : 한계 효용의 법칙
	
		

	- Core 개수 증가
		현재 32-core까지 (앞으로 계속 늘어날 예정)
		우리껀 많아봐야 2개


	




파이프라인의 발전
	파이프라인이 무효화 되지 않는 한 프로그램의 실행 속도는 메모리 Read에 종속됨
		명령어가 더 많아도 메모리 Read가 적으면 더 빠름



SIMD 명령어의 발전 (겜서버랑은 관계 x)

	하나의 명령어로 여러 개의 실수를 동시에 연산



		



Pipeline의 고도화에 따른 주의
	파이프 라인을 리셋시키면 손해가 너무 크다
	

	리셋의 원인
		시스템 콜
		분기 예측 오류
		Interrupt , Exception


	대책 
		시스템 콜을 될 수 있으면 하지말것
		If, switch등을 자제한다.





CACHE  
	프로그램 실행속도에 가장 큰 영향을 미치는 요소
	Cache가 큰 CPU 일 수록 속도가 빠름

	TIP
		같이 쓰에기 되는 데이터는 묶어 놓는다.
		루프 안에서 사용하는 데이터는 캐쉬에 다 올라올 수 있도록 한다.
		Int 대신에 short나 char를 사용한다.
			레벨 (1~100) -> char
			캐시에 데이터가 더 많이 올라갈 수 있음

	






**Multi Processor Programming
	- 잘하면 N배 성능향상, 못하면 성능 하락
	
	- Lock을 줄여라 (안쓰려고 노력해야함)
		Lock을 실행하는 순간 모든 CPU의 cache 사용이 중지됨
		Lock 자체 부하 : 버스 locking
		Semaphore, Condition 변수는 시스템 Call
	
	- Cache Thrashing 에 주의하라.
		Cache는 line단위로 움직임.
		Cache 사이에서 왔다갔다 하면 안됨
		int i, j; 이런식으로


					



	





Memory 
	서버용 메모리가 따로 있음

	일반적인 데스크톱용 메모리가 아니라 채널의 Error 수정 기능이 있는 특수 메모리를 사용
						Error Correcting Code

						자연적인 방사능 때문에 0이 1로바뀌는 에러 (자연스러운거임)


	대역폭이 크지만 반응 속도는 느리다.




Network
	10G 2개 꽂아서 씀

	서버간의 연결을 위해 한 서버에 여러개의 네트워크 카드를 꽂아서 사용하기도 함
		확장 버스의 대역폭을 고려해야한다.
		
	속도가 더 필요하면 Infiniband 사용
		아직까지는 이거 안씀

		



